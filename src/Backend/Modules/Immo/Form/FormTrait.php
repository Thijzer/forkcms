<?php

namespace Backend\Modules\Immo\Form;

use Backend\Core\Engine\Form;
use Backend\Core\Language\Language;

trait FormTrait
{
    private $data;

    public function __construct(
        $name = null,
        array $data = null,
        $action = null,
        $method = 'post',
        $useToken = true,
        $useGlobalError = true
    {
        parent::__construct($name, $action, $method, $useToken, $useGlobalError);
        $this->load($this);
        $this->data = $data;
    }

    public function isSubmitted()
    {
        $bool = parent::isSubmitted();
        $this->cleanupFields();
        return $bool;
    }

    public function isValid()
    {

        $this->processFields($this);
        return $this->isSubmitted() && $this->isCorrect();
    }

    public function validatePublication(Form $form)
    {
        $form->getField('publish_on_date')->isValid(Language::err('DateIsInvalid'));
        $form->getField('publish_on_time')->isValid(Language::err('TimeIsInvalid'));
    }

    public function addPublication(Form $form)
    {
        $form->addDate('publish_on_date');
        $form->addTime('publish_on_time');
    }

    public function addMeta(Form $form)
    {
        $rbtHiddenValues[] = ['label' => Language::lbl('Hidden', 'Backend'), 'value' => 'Y'];
        $rbtHiddenValues[] = ['label' => Language::lbl('Published', 'Backend'), 'value' => 'N'];
        $form->addRadiobutton('hidden', $rbtHiddenValues, 'N');

        // $this->meta = new BackendMeta($frm, null, 'title', true);
    }

    public function addEditor($name, $value = null, $class = null, $classError = null, $HTML = true)
    {
        return parent::addEditor($name, $this->data[$name] ?? $value, $class, $classError, $HTML);
    }

    public function addDropdown(
        $name,
        array $values = null,
        $selected = null,
        $multipleSelection = false,
        $class = null,
        $classError = null
    )
    {
        return parent::addDropdown($name, $values, $this->data[$name] ?? $selected, $multipleSelection, $class, $classError); // TODO: Change the autogenerated stub
    }

    public function addText($name, $value = null, $maxLength = 255, $class = null, $classError = null, $HTML = true)
    {
        return parent::addText($name, $this->data[$name] ?? $value, $maxLength, $class, $classError, $HTML);
    }
}


//$this->imageIsAllowed = $this->get('fork.settings')->get($this->URL->getModule(), 'show_image_form', true);

// set hidden values

